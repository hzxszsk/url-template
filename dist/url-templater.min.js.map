{"version":3,"file":"url-templater.min.js","sources":["../src/Util.js","../src/Url.js","../src/UrlTemplater.js"],"sourcesContent":["'use strict'\r\nconst Util = {\r\n    /**\r\n     * 判断是否为字符串\r\n     * \r\n     * @param {any} str \r\n     * @returns {Boolean}\r\n     */\r\n    isString (str) {\r\n        return typeof str === 'string'\r\n    },\r\n    /**\r\n     * 判断是否为数字\r\n     * \r\n     * @param {any} num \r\n     * @returns {Boolean}\r\n     */\r\n    isNumber (num) {\r\n        return typeof num === 'number'\r\n    },\r\n    /**\r\n     * 判断是否为数组\r\n     * \r\n     * @param {any} arr \r\n     * @returns {Boolean}\r\n     */\r\n    isArray (arr) {\r\n        return Array.isArray(arr)\r\n    },\r\n    /**\r\n     * 判断是否为对象\r\n     * \r\n     * @param {any} obj \r\n     * @returns {Boolean}\r\n     */\r\n    isObject (obj) {\r\n        return Object.prototype.toString.call(obj) === '[object Object]'\r\n    },\r\n    /**\r\n     * 判断是否为函数\r\n     * \r\n     * @param {any} fun \r\n     * @returns {Boolean}\r\n     */\r\n    isFunction (fun) {\r\n        return typeof fun === 'function'\r\n    },\r\n    /**\r\n     * 判断是否为null\r\n     * \r\n     * @param {any} arg \r\n     * @returns {Boolean}\r\n     */\r\n    isNull (arg) {\r\n        return arg === null\r\n    }\r\n}\r\n\r\nexport default Util","'use strict'\r\nimport Util from './Util'\r\n/**\r\n * a simple tool lib look like node's url module\r\n * \r\n * @class Url\r\n */\r\nexport default class Url {\r\n    /**\r\n     * transform a url string to a url object\r\n     * \r\n     * @static\r\n     * @param {String} url \r\n     * @return {Url}\r\n     * @memberof Url\r\n     */\r\n    static parse(url) {\r\n        if (Util.isString(url)) {\r\n            let url_obj = {\r\n                protocol: null,\r\n                host: null,\r\n                path: null,\r\n                query: null,\r\n                hash: null\r\n            }\r\n            const regExp_protocol = /^(\\w+):\\/\\//\r\n            // parse url's protocol part\r\n            let protocol = url.match(regExp_protocol)\r\n            if (protocol) {\r\n                url_obj.protocol = protocol[1]\r\n                // remove protocol part\r\n                url = url.slice(protocol[0].length)\r\n            }\r\n            // parse url's host part\r\n            if (url.split('/')[0].length > 0) {\r\n                let host = url.split('/')[0]\r\n                url_obj.host = host\r\n                // remove host part\r\n                url = url.slice(host.length)\r\n            }\r\n            // parse url's hash part (this parse order can make parse path easier)\r\n            let hash_index = url.indexOf('#')\r\n            if (hash_index !== -1) {\r\n                url_obj.hash = url.slice(hash_index)\r\n                // remove hash part\r\n                url = url.slice(0, hash_index)\r\n            }\r\n            // parse url's path part\r\n            let path_end_index = url.indexOf('?')\r\n            if (path_end_index !== -1) {\r\n                url_obj.path = url.slice(0, path_end_index)\r\n                url_obj.query = url.slice(path_end_index + 1)\r\n            } else {\r\n                url_obj.path = url\r\n            }\r\n            return url_obj\r\n        } else {\r\n            throw new Error('parameter url must be a string')\r\n        }\r\n    }\r\n    /**\r\n     * transform a url object to a url string\r\n     * \r\n     * @static\r\n     * @param {Object} url_obj \r\n     * @return {String}\r\n     * @memberof Url\r\n     */\r\n    static format(url_obj) {\r\n        if (Util.isObject(url_obj)) {\r\n            let _urlPartArray = []\r\n            _urlPartArray.push(url_obj.protocol ? url_obj.protocol + '://' : '')\r\n            _urlPartArray.push(url_obj.host ? url_obj.host : '')\r\n            _urlPartArray.push(url_obj.port ? ':' + url_obj.port : '')\r\n            _urlPartArray.push(url_obj.path ? url_obj.path : '')\r\n            _urlPartArray.push(url_obj.query ? '?' + url_obj.query : '')\r\n            _urlPartArray.push(url_obj.hash ? url_obj.hash : '')\r\n            return _urlPartArray.join('')\r\n        } else {\r\n            throw new Error('parameter url_obj must be a object')\r\n        }\r\n    }\r\n}","'use strict'\r\nimport Util from './Util'\r\n// import nodejs module by rollup-plugin-node-builtins\r\nimport Url from './Url'\r\n\r\nexport default class UrlTemplater {\r\n\r\n    /**\r\n     * create a url-template object\r\n     * \r\n     * @param {String} url 模板URL\r\n     * @param {Object} options 配置项\r\n     * @memberof UrlTemplate\r\n     */\r\n    constructor(url, options) {\r\n        if (Util.isString(url)) {\r\n            this._templater = url\r\n            this._templaterObj = Url.parse(url)\r\n            this.options = Object.assign({}, UrlTemplater.DEFAULT_OPTIONS, options)\r\n        } else {\r\n            throw new Error('parameter url must be a string!')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 解析URL参数和请求参数，返回解析完的结果URL\r\n     * \r\n     * @param {Object} {\r\n     *         params = {}, Url参数\r\n     *         query = {}   Query参数\r\n     *     } \r\n     * @returns {String}\r\n     * @memberof UrlTemplate\r\n     */\r\n    resolve({\r\n        params = {}, \r\n        query = {}\r\n    }) {\r\n        return this.getResolvedParamsPart(params) + this.getResolvedQueryPart(query)\r\n    }\r\n\r\n    /**\r\n     * 解析查询参数部分\r\n     * \r\n     * @param {Object} queryObj \r\n     * @returns {String}\r\n     * @memberof UrlTemplate\r\n     */\r\n    getResolvedQueryPart(queryObj) {\r\n\r\n        /**\r\n         * 将键-值对转化成key=value的数组\r\n         * \r\n         * @param {String} key \r\n         * @param {String|Number|Array|Object} value \r\n         * @returns \r\n         */\r\n        const _transformToEntity = function (key, value) {\r\n            if (Util.isArray(value)) {\r\n\r\n                // 数组，按数组规则解析，用[]连接\r\n                let _entityList = []\r\n                for (let i = 0; i < value.length; i++) {\r\n                    _entityList.concat(_transformToEntity(`${key}${_transformRule.arrCombineStart}${i}${_transformRule.arrCombineEnd}`, value[i]))\r\n                }\r\n                return _entityList\r\n\r\n            } else if (Util.isObject(value)) {\r\n\r\n                // 对象，按对象规则解析，用.连接\r\n                let _entityList = []\r\n                for (let _inner_key in value) {\r\n                    _entityList.concat(_transformToEntity(`${key}${_transformRule.objCombine}${_inner_key}`, value[_inner_key]))\r\n                }\r\n                return _entityList\r\n\r\n            } else if (Util.isFunction(value)) {\r\n\r\n                // 函数，按函数结果类型解析\r\n                return _transformToEntity(key, value())\r\n\r\n            } else {\r\n\r\n                // 其他类型，直接转化字符串，进行编码拼接\r\n                value = encodeURI(value.toString())\r\n                return `${key}=${value}`\r\n\r\n            } \r\n        }\r\n\r\n        let _transformRule = {\r\n                objCombine: this.options.objCombine,\r\n                arrCombineStart: this.options.arrCombineStart,\r\n                arrCombineEnd: this.options.arrCombineEnd,\r\n            },\r\n            _queryStart = this._templater.endsWith('?') ? '' : '?',\r\n            _queryList = [],\r\n            _andFlag = '&'\r\n\r\n        for (let key in queryObj) {\r\n            let value = queryObj[key]\r\n            let _transformResult = _transformToEntity(key, value)\r\n            if (Util.isArray(_transformResult)) {\r\n                _queryList.concat(_transformResult)\r\n            } else if (Util.isString) {\r\n                _queryList.push(_transformResult)\r\n            }\r\n        }\r\n\r\n        return _queryStart + _queryList.join(_andFlag)\r\n\r\n    }\r\n\r\n    /**\r\n     * 解析URL路径参数部分\r\n     * \r\n     * @param {Object} paramsObj \r\n     * @returns {String}\r\n     * @memberof UrlTemplate\r\n     */\r\n    getResolvedParamsPart(paramsObj) {\r\n\r\n        let _paramsRule = this.options.paramsRule\r\n        let _urlObj = Object.assign({}, this._templaterObj)\r\n\r\n        // replace url path parameters\r\n        _urlObj.path = _urlObj.path.replace(_paramsRule, function (substring, key) {\r\n            return paramsObj[key] || ''\r\n        })\r\n\r\n        return Url.format(_urlObj)\r\n    }\r\n}\r\n\r\nUrlTemplater.DEFAULT_OPTIONS = {\r\n    objCombine: '.',\r\n    arrCombineStart: '[',\r\n    arrCombineEnd: ']',\r\n    paramsRule: /:(\\w+)/g\r\n}\r\n\r\nUrlTemplater.version = '{{version}}'"],"names":["Util","str","num","arr","Array","isArray","obj","Object","prototype","toString","call","fun","arg","Url","url","isString","url_obj","regExp_protocol","protocol","match","slice","length","split","host","hash_index","indexOf","hash","path_end_index","path","query","Error","isObject","_urlPartArray","push","port","join","UrlTemplater","options","_templater","_templaterObj","parse","assign","DEFAULT_OPTIONS","params","this","getResolvedParamsPart","getResolvedQueryPart","queryObj","_transformRule","objCombine","arrCombineStart","arrCombineEnd","_queryStart","endsWith","_queryList","key","_transformResult","_transformToEntity","value","_entityList","i","concat","_inner_key","isFunction","encodeURI","paramsObj","_paramsRule","paramsRule","_urlObj","replace","substring","format","version"],"mappings":"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"}