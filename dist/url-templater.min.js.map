{"version":3,"file":"url-templater.min.js","sources":["../src/Util.js","../src/Url.js","../src/UrlTemplater.js"],"sourcesContent":["'use strict'\r\n/**\r\n * provide some function helpers\r\n */\r\nconst Util = {\r\n    /**\r\n     * judge is a string\r\n     * \r\n     * @param {any} arg \r\n     * @returns {Boolean}\r\n     */\r\n    isString (arg) {\r\n        return typeof arg === 'string'\r\n    },\r\n    /**\r\n     * judge is a number\r\n     * \r\n     * @param {any} arg \r\n     * @returns {Boolean}\r\n     */\r\n    isNumber (arg) {\r\n        return typeof arg === 'number'\r\n    },\r\n    /**\r\n     * judge is a array\r\n     * \r\n     * @param {any} arg \r\n     * @returns {Boolean}\r\n     */\r\n    isArray (arg) {\r\n        return Array.isArray(arg)\r\n    },\r\n    /**\r\n     * judge is a object\r\n     * \r\n     * @param {any} arg \r\n     * @returns {Boolean}\r\n     */\r\n    isObject (arg) {\r\n        return Object.prototype.toString.call(arg) === '[object Object]'\r\n    },\r\n    /**\r\n     * judge is a function\r\n     * \r\n     * @param {any} arg \r\n     * @returns {Boolean}\r\n     */\r\n    isFunction (arg) {\r\n        return typeof arg === 'function'\r\n    },\r\n    /**\r\n     * judge is null\r\n     * \r\n     * @param {any} arg \r\n     * @returns {Boolean}\r\n     */\r\n    isNull (arg) {\r\n        return arg === null\r\n    },\r\n    /**\r\n     * test is arg not a empty string,\r\n     * when arg is null or undefined, return false\r\n     * \r\n     * @param {any} arg \r\n     * @returns {Boolean}\r\n     */\r\n    isNotEmptyString (arg) {\r\n        if (Util.isString(arg) && arg.trim().length > 0) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    },\r\n    /**\r\n     * concat all parameters to string,\r\n     * when some parameter is null or undefined, not concat them\r\n     * \r\n     * @param {any} arg \r\n     * @returns {String}\r\n     */\r\n    concatString () {\r\n        const args = [...arguments]\r\n        return args.reduce((prev, curr) => {\r\n            if (curr) {\r\n                return prev + curr\r\n            }\r\n            return prev\r\n        }, '')\r\n    }\r\n}\r\n\r\nexport default Util","'use strict'\r\nimport Util from './Util'\r\n\r\n/**\r\n * a simple tool lib look like node's url module\r\n * \r\n * @class Url\r\n */\r\nexport default class Url {\r\n    \r\n    /**\r\n     * transform a url string to a url object\r\n     * \r\n     * @static\r\n     * @param {String} url \r\n     * @return {Url}\r\n     * @memberof Url\r\n     */\r\n    static parse(url) {\r\n        if (Util.isString(url)) {\r\n            let urlObj = {\r\n                protocol: '',\r\n                host: '',\r\n                path: '',\r\n                query: '',\r\n                hash: ''\r\n            }\r\n\r\n            // parse url's protocol part\r\n            const protocolRegExp = /^(\\w+):\\/\\//\r\n            let protocol = url.match(protocolRegExp)\r\n            if (protocol) {\r\n                urlObj.protocol = protocol[1]\r\n                // remove protocol part\r\n                url = url.slice(protocol[0].length)\r\n            }\r\n\r\n            // parse url's host part\r\n            const hostRegExp = /^[a-zA-Z0-9][-a-zA-Z0-9_]{0,62}(\\.[a-zA-Z0-9][-a-zA-Z0-9_]{0,62})*(:\\d{0,5})?/\r\n            let host = url.match(hostRegExp)\r\n            if (host) {\r\n                urlObj.host = host[0]\r\n                // remove host part\r\n                url = url.slice(urlObj.host.length)\r\n            }\r\n\r\n            // parse url's hash part (this parse order can make parse path easier)\r\n            const hashRegExp = /#.*$/\r\n            let hash = url.match(hashRegExp)\r\n            if (hash) {\r\n                urlObj.hash = hash[0]\r\n                // remove hash part\r\n                url = url.slice(0, url.length - urlObj.hash.length)\r\n            }\r\n\r\n            // parse url's path part\r\n            const queryRegExp = /\\?(.*)$/\r\n            let query = url.match(queryRegExp)\r\n            if (query) {\r\n                urlObj.query = query[1]\r\n                urlObj.path = url.slice(0, query.index)\r\n            } else {\r\n                urlObj.path = url\r\n            }\r\n            \r\n            return urlObj\r\n        } else {\r\n            throw new Error('parameter url must be a string')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * transform a url object to a url string\r\n     * \r\n     * @static\r\n     * @param {Object} urlObj \r\n     * @return {String}\r\n     * @memberof Url\r\n     */\r\n    static format(urlObj) {\r\n        if (Util.isObject(urlObj)) {\r\n            let urlPartArray = []\r\n            urlPartArray.push(Util.isNotEmptyString(urlObj.protocol) ? urlObj.protocol + '://' : '')\r\n            urlPartArray.push(Util.isNotEmptyString(urlObj.host) ? urlObj.host : '')\r\n            urlPartArray.push(Util.isNotEmptyString(urlObj.path) ? urlObj.path : '')\r\n            urlPartArray.push(Util.isNotEmptyString(urlObj.query) ? '?' + urlObj.query : '')\r\n            urlPartArray.push(Util.isNotEmptyString(urlObj.hash) ? urlObj.hash : '')\r\n            return urlPartArray.join('')\r\n        } else {\r\n            throw new Error('parameter url_obj must be a object')\r\n        }\r\n    }\r\n}","'use strict'\r\nimport Util from './Util'\r\nimport Url from './Url'\r\n\r\n/**\r\n * url-templater main class\r\n * \r\n * @export\r\n * @class UrlTemplater\r\n */\r\nexport default class UrlTemplater {\r\n\r\n    /**\r\n     * create a url-template object\r\n     * \r\n     * @param {String} url      url Template\r\n     * @param {Object} options  constructor's option object, has attrs like UrlTemplater.DEFAULT_OPTIONS\r\n     * @memberof UrlTemplate\r\n     */\r\n    constructor(url, options) {\r\n        if (Util.isString(url)) {\r\n            this.options = Object.assign({}, UrlTemplater.DEFAULT_OPTIONS, options)\r\n            this.template = url\r\n            this.templateObj = Url.parse(url)\r\n        } else {\r\n            throw new Error('parameter url must be a string!')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * resolve url parameters and query parameters, and return a url result string\r\n     * \r\n     * @param {Object} {\r\n     *         params = {}  url parameters\r\n     *         query = {}   query parameters\r\n     *     } \r\n     * @returns {String}\r\n     * @memberof UrlTemplate\r\n     */\r\n    resolve({\r\n        params = {},\r\n        query = {}\r\n    }) {\r\n        let queryString = this.getQueryPart(query)\r\n        return this.getFullUrl(params, queryString)\r\n    }\r\n\r\n    /**\r\n     * resolve query parameters\r\n     * \r\n     * @param {Object} queryObj \r\n     * @returns {String}\r\n     * @memberof UrlTemplate\r\n     */\r\n    getQueryPart(queryObj) {\r\n\r\n        /**\r\n         * add a new element into an array\r\n         * \r\n         * @param {Array} array \r\n         * @param {*} elem \r\n         */\r\n        const addArrayElem = function (array, elem) {\r\n            if (!Util.isArray(array)) {\r\n                throw new Error('parameter array must be an Array Object')\r\n            }\r\n            if (Util.isArray(elem)) {\r\n                array = array.concat(elem)\r\n            } else {\r\n                array.push(elem)\r\n            }\r\n            return array\r\n        }\r\n\r\n        /**\r\n         * transform all key-value entity to an array, and the array's value is string look like key=value\r\n         * \r\n         * @param {String} key \r\n         * @param {String|Number|Array|Object|Function} value \r\n         * @returns {String|Array}\r\n         */\r\n        const transformToEntity = function (key, value) {\r\n            if (Util.isArray(value)) {\r\n\r\n                // value is an array, combine keys with []\r\n                let entityList = []\r\n                for (let i = 0; i < value.length; i++) {\r\n\r\n                    let newKey = `${key}${transformRule.arrCombine[0]}${i}${transformRule.arrCombine[1]}`\r\n                    let newValue = value[i]\r\n\r\n                    entityList = addArrayElem(entityList, transformToEntity(newKey, newValue))\r\n                }\r\n                return entityList\r\n\r\n            } else if (Util.isObject(value)) {\r\n\r\n                // value is a object, combine keys with '.'\r\n                let entityList = []\r\n                for (let nextKey in value) {\r\n\r\n                    let newKey = `${key}${transformRule.objCombine}${nextKey}`\r\n                    let newValue = value[nextKey]\r\n\r\n                    entityList = addArrayElem(entityList, transformToEntity(newKey, newValue))\r\n                }\r\n                return entityList\r\n\r\n            } else if (Util.isFunction(value)) {\r\n\r\n                // value is a function, use value's return result as key's value\r\n                return transformToEntity(key, value())\r\n\r\n            } else {\r\n\r\n                // value is other type, use value's toString function's return result as key's value\r\n                return Util.concatString(key, '=', value)\r\n\r\n            }\r\n        }\r\n\r\n        let transformRule = {\r\n                objCombine: this.options.objCombine,\r\n                arrCombine: this.options.arrCombine\r\n            },\r\n            queryList = [],\r\n            andSymbol = '&'\r\n\r\n        for (let key in queryObj) {\r\n            let value = queryObj[key],\r\n                transformResult = transformToEntity(key, value)\r\n            queryList = addArrayElem(queryList, transformResult)\r\n        }\r\n\r\n        return queryList.join(andSymbol)\r\n    }\r\n\r\n    /**\r\n     * resolve url parameters and concat queryString, finally return a whole url\r\n     * \r\n     * @param {Object} paramsObj \r\n     * @param {string} [queryString=''] \r\n     * @returns \r\n     * @memberof UrlTemplater\r\n     */\r\n    getFullUrl(paramsObj, queryString = '') {\r\n\r\n        let paramsRule = new RegExp(this.options.paramsRule, 'g'),\r\n            urlObj = Object.assign({}, this.templateObj),\r\n            queryConcatSymbol = ''\r\n        \r\n        if (urlObj.query && urlObj.query.length > 0 && queryString.length > 0) {\r\n            queryConcatSymbol = '&'\r\n        }\r\n\r\n        // concat static query string and dynamic query string \r\n        urlObj.query = Util.concatString(urlObj.query, queryConcatSymbol, queryString)\r\n        // replace url parameters in path string, the no-value parameter will be replace with empty string\r\n        urlObj.path = urlObj.path.replace(paramsRule, (substring, key) => {\r\n            let value = paramsObj[key]\r\n            while (Util.isFunction(value)) {\r\n                value = value()\r\n            }\r\n            return value || ''\r\n        })\r\n\r\n        return Url.format(urlObj)\r\n    }\r\n}\r\n\r\nUrlTemplater.DEFAULT_OPTIONS = {\r\n    objCombine: '.',\r\n    arrCombine: ['[', ']'],\r\n    paramsRule: /:(\\w+)/g\r\n}\r\n\r\nUrlTemplater.version = '{{version}}'"],"names":["Util","arg","Array","isArray","Object","prototype","toString","call","isString","trim","length","arguments","reduce","prev","curr","Url","url","urlObj","protocolRegExp","protocol","match","slice","hostRegExp","host","hashRegExp","hash","queryRegExp","query","path","index","Error","isObject","urlPartArray","push","isNotEmptyString","join","UrlTemplater","options","assign","DEFAULT_OPTIONS","template","templateObj","parse","params","queryString","this","getQueryPart","getFullUrl","queryObj","addArrayElem","array","elem","concat","transformRule","objCombine","arrCombine","queryList","key","transformResult","transformToEntity","value","entityList","i","newKey","newValue","nextKey","isFunction","concatString","paramsObj","paramsRule","RegExp","queryConcatSymbol","replace","substring","format","version"],"mappings":"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"}